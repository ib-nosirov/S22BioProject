function classAcc = Copy_of_HPFilterParamTest(timeSeriesData,keywords,pup,pdown,lag)
    % The PH Walker function achieved 58.03% accuracy on a simple linear
    % classifier; my goal is to write this classifier by hand.
    % step 1: compute the lag-1 autocorrelation of every timeseries
    % (feature space mapping).

    numOfTS = length(timeSeriesData);
    autoCorrData = zeros(numOfTS,1);
    for ii=1:numOfTS
         y = normalize(timeSeriesData{ii});
         res = HighPassFilter(y,pup,pdown);
         acf = autocorr(double(res));
         autoCorrData(ii) = acf(1+lag);
    end
    % Same as TS_Compute up until this point.
    % step 2: run discriminant analysis in the feature space.
    groupLabels = categorical(reshape(keywords,[numOfTS,1]));
    fnTestStat = @(XTrain,yTrain,XTest,yTest)fnLoss(yTest,classify(XTest,XTrain,yTrain,'linear'));
        fnLoss = 100*mean(arrayfun(@(x) mean(yPredict(yTest==x)==yTest(yTest==x)),{'direct','random','serial'}));
    classAcc = fnTestStat(autoCorrData,groupLabels,autoCorrData,groupLabels);

%     data = table(groupLabels,autoCorrData);
%     mdl = fitcdiscr(data,'groupLabels','Prior','empirical',...
%     'DiscrimType','linear','Weights',InverseProbWeight(groupLabels),'KFold',10);
%     yTrain = groupLabels;
%     yPredict = kfoldPredict(mdl);
%     classLabels = categories([yPredict;yTrain]);
%     classAcc = 100*mean(arrayfun(@(x) mean(yPredict(yTrain==x)==yTrain(yTrain==x)),classLabels));
% 
%     function weights = InverseProbWeight(Labels)
%         classNames = unique(Labels);
%         numClasses = length(classNames);
%         numObs = length(Labels);
%         
%         weights = zeros(size(Labels));
%         
%         for x = 1:numClasses
% 	        isClass = (Labels == classNames(x));
% 	        weights(isClass) = numObs/sum(isClass);
%         end
%     end
end
%    fn_handle = @(XTrain,yTrain,XTest,yTest) fn_loss(yTest,classify(XTest,XTrain,yTrain,'linear'));
